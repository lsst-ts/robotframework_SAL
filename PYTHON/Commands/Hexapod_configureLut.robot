*** Settings ***
Documentation    Hexapod_configureLut commander/controller tests.
Suite Setup    Log Many    ${Host}    ${subSystem}    ${component}    ${timeout}
Suite Teardown    Close All Connections
Library    SSHLibrary
Library    String
Resource    ../../Global_Vars.robot

*** Variables ***
${subSystem}    hexapod
${component}    configureLut
${timeout}    30s

*** Test Cases ***
Create Commander Session
    [Documentation]    Connect to the SAL host.
    [Tags]    smoke
    Comment    Connect to host.
    Open Connection    host=${Host}    alias=Commander    timeout=${timeout}    prompt=${Prompt}
    Comment    Login.
    Log    ${ContInt}
    Run Keyword If    "${ContInt}"=="false"    Login    ${UserName}    ${PassWord}
    Run Keyword If    "${ContInt}"=="true"    Login With Public Key    ${UserName}    keyfile=${PassWord}
    Directory Should Exist    ${SALInstall}
    Directory Should Exist    ${SALHome}
    Directory Should Exist    ${SALWorkDir}/${subSystem}

Create Controller Session
    [Documentation]    Connect to the SAL host.
    [Tags]    smoke
    Comment    Connect to host.
    Open Connection    host=${Host}    alias=Controller    timeout=${timeout}    prompt=${Prompt}
    Comment    Login.
    Log    ${ContInt}
    Run Keyword If    "${ContInt}"=="false"    Login    ${UserName}    ${PassWord}
    Run Keyword If    "${ContInt}"=="true"    Login With Public Key    ${UserName}    keyfile=${PassWord}
    Directory Should Exist    ${SALInstall}
    Directory Should Exist    ${SALHome}
    Directory Should Exist    ${SALWorkDir}/${subSystem}

Verify Component Commander and Controller
    [Tags]    smoke
    File Should Exist    ${SALWorkDir}/${subSystem}/python/${subSystem}_Commander_${component}.py
    File Should Exist    ${SALWorkDir}/${subSystem}/python/${subSystem}_Controller_${component}.py

Start Commander - Verify Missing Inputs Error
    [Tags]    functional
    Switch Connection    Commander
    Comment    Move to working directory.
    Write    cd ${SALWorkDir}/${subSystem}/python
    Comment    Start Commander.
    ${input}=    Write    python ${subSystem}_Commander_${component}.py 
    ${output}=    Read Until Prompt
    Log    ${output}
    Should Contain    ${output}   ERROR : Invalid or missing arguments :

Start Commander - Verify Timeout without Controller
    [Tags]    functional
    Switch Connection    Commander
    Comment    Move to working directory.
    Write    cd ${SALWorkDir}/${subSystem}/python
    Comment    Start Commander.
    ${input}=    Write    python ${subSystem}_Commander_${component}.py 77.924 96.3792 76.0287 17.0837 6.8064 41.0582 67.0641 98.9761 35.1316 91.2862 1.6907 51.1871 19.873 69.3726 97.0506 49.0824 11.9773 78.4441 52.1341 88.9709 50.0009 93.1868 50.1497 68.4429 61.1876 7.5388 14.1842 43.9573 82.9551 87.642 25.0728 43.7968 35.5536 39.0205 42.4245 69.1779 17.7604 73.1826 3.968 93.4364 42.5512 2.1672 78.0838 11.0447 88.1526 65.7612 96.3159 2.7696 6.9718 43.2735 21.0148 25.2563 5.0394 14.7628 26.7643 91.4815 27.9967 87.1701 66.0683 62.5006 32.8805 81.5642 49.3973 40.1997 11.5425 15.1141 28.9855 71.7607 96.0561 35.8012 89.0038 22.5784 46.6976 32.4199 91.1329 31.3402 4.8557 78.5399 5.8687 55.1616 75.5535 11.6686 78.2091 7.4148 12.9573 32.7419 29.3872 58.7762 46.2297 87.3815 6.3754 74.4929 52.8687 71.9907 95.682 23.5751 41.6366 80.7429 92.9679 37.4445 30.4211 4.2431 47.8277 30.2226 76.0254 42.7788 88.0123 96.486 54.8153 52.1442 89.6358 93.9041 99.3634 28.4582 23.2589 44.9146 67.5893 79.1746 37.2815 47.0873 35.2181 15.9438 85.6066 38.15 86.3484 34.2712 3.6806 33.7708 0.049 28.8833 72.0158 30.6799 7.152 94.2994 98.4359 30.5241 21.7663 57.675 62.1818 4.1488 30.6004 90.3588 41.2726 52.6662 1.4595 44.1806 50.8288 71.1316 34.3264 18.9313 24.9366 78.858 5.1535 36.984 59.4842 73.404 31.6731 79.2882 14.8449 84.1174 13.8812 59.7138 88.8407 21.4765 89.103 25.7405 64.5389 63.4488 45.5083 16.9828 20.2694 41.5077 28.5931 98.7323 80.0131 53.0244 41.3623 21.3552 26.4497 58.6642 74.5117 30.0525 65.411 66.9376 97.6317 5.2479 76.0132 5.2274 11.064 12.8202 13.4331 36.9975 8.1824 78.6125 67.9657 22.7658 67.1305 24.2708 15.4164 8.6963 45.4114 22.8594 70.6923 47.8942 8.8122 53.077 87.6281 69.3317 89.0792 50.7584 31.2652 50.2104 12.7506 17.9206 32.053 74.5407 67.0446 14.2988 64.8017 89.4312 90.5895 39.724 66.226 98.9928 87.8248 37.0252 71.0263 25.5836 55.2126 93.5105 61.5025 0.4718 83.4304 6.7899 75.2847 76.1802 67.5389 97.997 62.171 35.4653 1.0556 92.7342 0.0505 28.5601 64.4567 8.1061 89.0722 48.0414 47.4558 47.238 97.7066 10.2733 82.9377 67.8099 47.053 91.7269 48.0173 29.9517 58.6429 14.8906 71.4026 42.1527 35.3662 56.5886 33.3927 78.8004 63.9833 31.525 90.7052 9.1529 58.3844 41.4461 51.6172 11.8492 48.2279 41.3948 80.5721 72.7118 29.8121 79.1356 58.2856 32.6677 58.0246 31.6035 2.7972 46.8452 43.6053 20.8604 44.4321 3.1805 12.2142 38.5755 38.2697 85.4794 41.8611 0.2867 97.2596 3.9307 79.6265 4.7165 66.597 95.7956 67.7119 54.9818 93.3522 61.9982 40.5319 72.5041 52.0652 44.3816 99.7807 46.6243 75.5858 77.4102 8.0201 82.5945 63.9054 63.51 12.8009 17.3945 26.8937 84.7336 87.7176 36.8332 78.0382 21.5095 72.0514 69.0981 21.5443 10.9083 65.1788 39.8169 66.325 45.1745 34.8651 30.3898 8.1991 42.9921 74.06 37.4037 74.2752 54.5691 23.9846 30.2893 80.8024 58.1366 58.816 85.9018 44.5716 35.5764 69.549 47.7653 48.926 34.0146 46.8439 47.9453 6.3996 9.9335 73.0597 83.6985 63.9232 41.8229 98.0168 49.2535 5.4156 64.1866 51.0411 36.7481 12.3589 2.9567 7.5108 79.4444 95.8447 81.822 46.9731 12.0531 0.0245 76.1758 43.1998 15.6586 16.9517 11.2518 39.7764 92.8034 69.625 30.5096 56.9417 93.7116 98.7434 43.944 39.8359 29.8754 9.4332 31.6837 94.3801 88.2738 27.7856 58.7174 83.8952 87.8454 96.7778 41.1032 69.2431 69.2253 87.958 30.5121 56.7161 53.9626 74.1549 74.206 62.717 7.6365 98.3979 65.0904 15.0759 23.8921 21.283 40.3206 55.1455 77.5215 63.3503 99.3738 25.6118 27.5573 66.0363 89.0126 90.4591 42.0286 10.912 36.7247 75.9369 72.5525 31.9468 58.9668 11.2988 94.1086 44.1414 14.9587 61.4515 49.8236 73.7058 74.5258 16.1999 77.1303 20.6768 84.4193 91.6407 37.0792 44.9144 88.6784 41.1177 31.6627 62.8785 16.2699 71.4329 96.9662 68.4534 69.9102 85.779 82.9274 54.0749 92.0778 41.5194 90.1677 65.7059 93.7671 74.6412 1.3937 48.4421 5.8922 13.3607 38.9509 55.4409 15.141 77.501 2.4787 29.412 0.916 96.0519 68.114 4.4435 59.6819 18.0242 11.2265 50.8804 8.8114 25.4717 9.3105 57.5124 67.37 24.0084 40.1972 62.4217 20.9481 76.0034 2.0156 15.9165 82.3703 26.6404 11.1249 82.424 45.4861 17.8684 89.6806 93.2913 32.9056 4.0138 16.8728 3.6863 32.742 82.6215 42.6241 99.5618 43.5834 76.8938 33.1376 4.9452 88.785 8.5013 75.4114 56.7229 93.1116 33.6792 81.8649 30.6917 63.0232 62.8769 98.9247 11.2017 59.5968 11.7055 28.2408 99.0372 11.5133 19.4098 76.9594 22.253 43.4698 67.7175 99.5258
    ${output}=    Read Until Prompt
    Log    ${output}
    ${CmdComplete}=    Get Line    ${output}    -2
    Should Match Regexp    ${CmdComplete}    (=== \\[waitForCompletion_${component}\\] command )[0-9]+( timed out :)

Start Controller
    [Tags]    functional
    Switch Connection    Controller
    Comment    Move to working directory.
    Write    cd ${SALWorkDir}/${subSystem}/python
    Comment    Start Controller.
    ${input}=    Write    python ${subSystem}_Controller_${component}.py
    ${output}=    Read Until    controller ready
    Log    ${output}
    Should Contain    ${output}    ${subSystem}_${component} controller ready

Start Commander
    [Tags]    functional
    Switch Connection    Commander
    Comment    Move to working directory.
    Write    cd ${SALWorkDir}/${subSystem}/python
    Comment    Start Commander.
    ${input}=    Write    python ${subSystem}_Commander_${component}.py 77.924 96.3792 76.0287 17.0837 6.8064 41.0582 67.0641 98.9761 35.1316 91.2862 1.6907 51.1871 19.873 69.3726 97.0506 49.0824 11.9773 78.4441 52.1341 88.9709 50.0009 93.1868 50.1497 68.4429 61.1876 7.5388 14.1842 43.9573 82.9551 87.642 25.0728 43.7968 35.5536 39.0205 42.4245 69.1779 17.7604 73.1826 3.968 93.4364 42.5512 2.1672 78.0838 11.0447 88.1526 65.7612 96.3159 2.7696 6.9718 43.2735 21.0148 25.2563 5.0394 14.7628 26.7643 91.4815 27.9967 87.1701 66.0683 62.5006 32.8805 81.5642 49.3973 40.1997 11.5425 15.1141 28.9855 71.7607 96.0561 35.8012 89.0038 22.5784 46.6976 32.4199 91.1329 31.3402 4.8557 78.5399 5.8687 55.1616 75.5535 11.6686 78.2091 7.4148 12.9573 32.7419 29.3872 58.7762 46.2297 87.3815 6.3754 74.4929 52.8687 71.9907 95.682 23.5751 41.6366 80.7429 92.9679 37.4445 30.4211 4.2431 47.8277 30.2226 76.0254 42.7788 88.0123 96.486 54.8153 52.1442 89.6358 93.9041 99.3634 28.4582 23.2589 44.9146 67.5893 79.1746 37.2815 47.0873 35.2181 15.9438 85.6066 38.15 86.3484 34.2712 3.6806 33.7708 0.049 28.8833 72.0158 30.6799 7.152 94.2994 98.4359 30.5241 21.7663 57.675 62.1818 4.1488 30.6004 90.3588 41.2726 52.6662 1.4595 44.1806 50.8288 71.1316 34.3264 18.9313 24.9366 78.858 5.1535 36.984 59.4842 73.404 31.6731 79.2882 14.8449 84.1174 13.8812 59.7138 88.8407 21.4765 89.103 25.7405 64.5389 63.4488 45.5083 16.9828 20.2694 41.5077 28.5931 98.7323 80.0131 53.0244 41.3623 21.3552 26.4497 58.6642 74.5117 30.0525 65.411 66.9376 97.6317 5.2479 76.0132 5.2274 11.064 12.8202 13.4331 36.9975 8.1824 78.6125 67.9657 22.7658 67.1305 24.2708 15.4164 8.6963 45.4114 22.8594 70.6923 47.8942 8.8122 53.077 87.6281 69.3317 89.0792 50.7584 31.2652 50.2104 12.7506 17.9206 32.053 74.5407 67.0446 14.2988 64.8017 89.4312 90.5895 39.724 66.226 98.9928 87.8248 37.0252 71.0263 25.5836 55.2126 93.5105 61.5025 0.4718 83.4304 6.7899 75.2847 76.1802 67.5389 97.997 62.171 35.4653 1.0556 92.7342 0.0505 28.5601 64.4567 8.1061 89.0722 48.0414 47.4558 47.238 97.7066 10.2733 82.9377 67.8099 47.053 91.7269 48.0173 29.9517 58.6429 14.8906 71.4026 42.1527 35.3662 56.5886 33.3927 78.8004 63.9833 31.525 90.7052 9.1529 58.3844 41.4461 51.6172 11.8492 48.2279 41.3948 80.5721 72.7118 29.8121 79.1356 58.2856 32.6677 58.0246 31.6035 2.7972 46.8452 43.6053 20.8604 44.4321 3.1805 12.2142 38.5755 38.2697 85.4794 41.8611 0.2867 97.2596 3.9307 79.6265 4.7165 66.597 95.7956 67.7119 54.9818 93.3522 61.9982 40.5319 72.5041 52.0652 44.3816 99.7807 46.6243 75.5858 77.4102 8.0201 82.5945 63.9054 63.51 12.8009 17.3945 26.8937 84.7336 87.7176 36.8332 78.0382 21.5095 72.0514 69.0981 21.5443 10.9083 65.1788 39.8169 66.325 45.1745 34.8651 30.3898 8.1991 42.9921 74.06 37.4037 74.2752 54.5691 23.9846 30.2893 80.8024 58.1366 58.816 85.9018 44.5716 35.5764 69.549 47.7653 48.926 34.0146 46.8439 47.9453 6.3996 9.9335 73.0597 83.6985 63.9232 41.8229 98.0168 49.2535 5.4156 64.1866 51.0411 36.7481 12.3589 2.9567 7.5108 79.4444 95.8447 81.822 46.9731 12.0531 0.0245 76.1758 43.1998 15.6586 16.9517 11.2518 39.7764 92.8034 69.625 30.5096 56.9417 93.7116 98.7434 43.944 39.8359 29.8754 9.4332 31.6837 94.3801 88.2738 27.7856 58.7174 83.8952 87.8454 96.7778 41.1032 69.2431 69.2253 87.958 30.5121 56.7161 53.9626 74.1549 74.206 62.717 7.6365 98.3979 65.0904 15.0759 23.8921 21.283 40.3206 55.1455 77.5215 63.3503 99.3738 25.6118 27.5573 66.0363 89.0126 90.4591 42.0286 10.912 36.7247 75.9369 72.5525 31.9468 58.9668 11.2988 94.1086 44.1414 14.9587 61.4515 49.8236 73.7058 74.5258 16.1999 77.1303 20.6768 84.4193 91.6407 37.0792 44.9144 88.6784 41.1177 31.6627 62.8785 16.2699 71.4329 96.9662 68.4534 69.9102 85.779 82.9274 54.0749 92.0778 41.5194 90.1677 65.7059 93.7671 74.6412 1.3937 48.4421 5.8922 13.3607 38.9509 55.4409 15.141 77.501 2.4787 29.412 0.916 96.0519 68.114 4.4435 59.6819 18.0242 11.2265 50.8804 8.8114 25.4717 9.3105 57.5124 67.37 24.0084 40.1972 62.4217 20.9481 76.0034 2.0156 15.9165 82.3703 26.6404 11.1249 82.424 45.4861 17.8684 89.6806 93.2913 32.9056 4.0138 16.8728 3.6863 32.742 82.6215 42.6241 99.5618 43.5834 76.8938 33.1376 4.9452 88.785 8.5013 75.4114 56.7229 93.1116 33.6792 81.8649 30.6917 63.0232 62.8769 98.9247 11.2017 59.5968 11.7055 28.2408 99.0372 11.5133 19.4098 76.9594 22.253 43.4698 67.7175 99.5258
    ${output}=    Read Until Prompt
    Log    ${output}
    Should Contain X Times    ${output}    === [issueCommand_${component}] writing a command containing :    1
    Should Contain X Times    ${output}    device :    1
    Should Contain X Times    ${output}    property :    1
    Should Contain X Times    ${output}    action :    1
    Should Contain X Times    ${output}    value :    1
    Should Contain X Times    ${output}    xlut : 77.924    1
    Should Contain X Times    ${output}    ylut : 6.3754    1
    Should Contain X Times    ${output}    zlut : 74.5117    1
    Should Contain X Times    ${output}    ulut : 58.3844    1
    Should Contain X Times    ${output}    vlut : 63.9232    1
    Should Contain X Times    ${output}    wlut : 41.1177    1
    ${CmdComplete}=    Get Line    ${output}    -2
    Should Match Regexp    ${CmdComplete}    (=== \\[waitForCompletion_${component}\\] command )[0-9]+( completed ok :)

Read Controller
    [Tags]    functional
    Switch Connection    Controller
    ${output}=    Read Until    result \ \ : Done : OK
    Log    ${output}
    Should Contain X Times    ${output}    xlut(90) = [77.924, 96.3792, 76.0287, 17.0837, 6.8064, 41.0582, 67.0641, 98.9761, 35.1316, 91.2862, 1.6907, 51.1871, 19.873, 69.3726, 97.0506, 49.0824, 11.9773, 78.4441, 52.1341, 88.9709, 50.0009, 93.1868, 50.1497, 68.4429, 61.1876, 7.5388, 14.1842, 43.9573, 82.9551, 87.642, 25.0728, 43.7968, 35.5536, 39.0205, 42.4245, 69.1779, 17.7604, 73.1826, 3.968, 93.4364, 42.5512, 2.1672, 78.0838, 11.0447, 88.1526, 65.7612, 96.3159, 2.7696, 6.9718, 43.2735, 21.0148, 25.2563, 5.0394, 14.7628, 26.7643, 91.4815, 27.9967, 87.1701, 66.0683, 62.5006, 32.8805, 81.5642, 49.3973, 40.1997, 11.5425, 15.1141, 28.9855, 71.7607, 96.0561, 35.8012, 89.0038, 22.5784, 46.6976, 32.4199, 91.1329, 31.3402, 4.8557, 78.5399, 5.8687, 55.1616, 75.5535, 11.6686, 78.2091, 7.4148, 12.9573, 32.7419, 29.3872, 58.7762, 46.2297, 87.3815]    1
    Should Contain X Times    ${output}    ylut(90) = [6.3754, 74.4929, 52.8687, 71.9907, 95.682, 23.5751, 41.6366, 80.7429, 92.9679, 37.4445, 30.4211, 4.2431, 47.8277, 30.2226, 76.0254, 42.7788, 88.0123, 96.486, 54.8153, 52.1442, 89.6358, 93.9041, 99.3634, 28.4582, 23.2589, 44.9146, 67.5893, 79.1746, 37.2815, 47.0873, 35.2181, 15.9438, 85.6066, 38.15, 86.3484, 34.2712, 3.6806, 33.7708, 0.049, 28.8833, 72.0158, 30.6799, 7.152, 94.2994, 98.4359, 30.5241, 21.7663, 57.675, 62.1818, 4.1488, 30.6004, 90.3588, 41.2726, 52.6662, 1.4595, 44.1806, 50.8288, 71.1316, 34.3264, 18.9313, 24.9366, 78.858, 5.1535, 36.984, 59.4842, 73.404, 31.6731, 79.2882, 14.8449, 84.1174, 13.8812, 59.7138, 88.8407, 21.4765, 89.103, 25.7405, 64.5389, 63.4488, 45.5083, 16.9828, 20.2694, 41.5077, 28.5931, 98.7323, 80.0131, 53.0244, 41.3623, 21.3552, 26.4497, 58.6642]    1
    Should Contain X Times    ${output}    zlut(90) = [74.5117, 30.0525, 65.411, 66.9376, 97.6317, 5.2479, 76.0132, 5.2274, 11.064, 12.8202, 13.4331, 36.9975, 8.1824, 78.6125, 67.9657, 22.7658, 67.1305, 24.2708, 15.4164, 8.6963, 45.4114, 22.8594, 70.6923, 47.8942, 8.8122, 53.077, 87.6281, 69.3317, 89.0792, 50.7584, 31.2652, 50.2104, 12.7506, 17.9206, 32.053, 74.5407, 67.0446, 14.2988, 64.8017, 89.4312, 90.5895, 39.724, 66.226, 98.9928, 87.8248, 37.0252, 71.0263, 25.5836, 55.2126, 93.5105, 61.5025, 0.4718, 83.4304, 6.7899, 75.2847, 76.1802, 67.5389, 97.997, 62.171, 35.4653, 1.0556, 92.7342, 0.0505, 28.5601, 64.4567, 8.1061, 89.0722, 48.0414, 47.4558, 47.238, 97.7066, 10.2733, 82.9377, 67.8099, 47.053, 91.7269, 48.0173, 29.9517, 58.6429, 14.8906, 71.4026, 42.1527, 35.3662, 56.5886, 33.3927, 78.8004, 63.9833, 31.525, 90.7052, 9.1529]    1
    Should Contain X Times    ${output}    ulut(90) = [58.3844, 41.4461, 51.6172, 11.8492, 48.2279, 41.3948, 80.5721, 72.7118, 29.8121, 79.1356, 58.2856, 32.6677, 58.0246, 31.6035, 2.7972, 46.8452, 43.6053, 20.8604, 44.4321, 3.1805, 12.2142, 38.5755, 38.2697, 85.4794, 41.8611, 0.2867, 97.2596, 3.9307, 79.6265, 4.7165, 66.597, 95.7956, 67.7119, 54.9818, 93.3522, 61.9982, 40.5319, 72.5041, 52.0652, 44.3816, 99.7807, 46.6243, 75.5858, 77.4102, 8.0201, 82.5945, 63.9054, 63.51, 12.8009, 17.3945, 26.8937, 84.7336, 87.7176, 36.8332, 78.0382, 21.5095, 72.0514, 69.0981, 21.5443, 10.9083, 65.1788, 39.8169, 66.325, 45.1745, 34.8651, 30.3898, 8.1991, 42.9921, 74.06, 37.4037, 74.2752, 54.5691, 23.9846, 30.2893, 80.8024, 58.1366, 58.816, 85.9018, 44.5716, 35.5764, 69.549, 47.7653, 48.926, 34.0146, 46.8439, 47.9453, 6.3996, 9.9335, 73.0597, 83.6985]    1
    Should Contain X Times    ${output}    vlut(90) = [63.9232, 41.8229, 98.0168, 49.2535, 5.4156, 64.1866, 51.0411, 36.7481, 12.3589, 2.9567, 7.5108, 79.4444, 95.8447, 81.822, 46.9731, 12.0531, 0.0245, 76.1758, 43.1998, 15.6586, 16.9517, 11.2518, 39.7764, 92.8034, 69.625, 30.5096, 56.9417, 93.7116, 98.7434, 43.944, 39.8359, 29.8754, 9.4332, 31.6837, 94.3801, 88.2738, 27.7856, 58.7174, 83.8952, 87.8454, 96.7778, 41.1032, 69.2431, 69.2253, 87.958, 30.5121, 56.7161, 53.9626, 74.1549, 74.206, 62.717, 7.6365, 98.3979, 65.0904, 15.0759, 23.8921, 21.283, 40.3206, 55.1455, 77.5215, 63.3503, 99.3738, 25.6118, 27.5573, 66.0363, 89.0126, 90.4591, 42.0286, 10.912, 36.7247, 75.9369, 72.5525, 31.9468, 58.9668, 11.2988, 94.1086, 44.1414, 14.9587, 61.4515, 49.8236, 73.7058, 74.5258, 16.1999, 77.1303, 20.6768, 84.4193, 91.6407, 37.0792, 44.9144, 88.6784]    1
    Should Contain X Times    ${output}    wlut(90) = [41.1177, 31.6627, 62.8785, 16.2699, 71.4329, 96.9662, 68.4534, 69.9102, 85.779, 82.9274, 54.0749, 92.0778, 41.5194, 90.1677, 65.7059, 93.7671, 74.6412, 1.3937, 48.4421, 5.8922, 13.3607, 38.9509, 55.4409, 15.141, 77.501, 2.4787, 29.412, 0.916, 96.0519, 68.114, 4.4435, 59.6819, 18.0242, 11.2265, 50.8804, 8.8114, 25.4717, 9.3105, 57.5124, 67.37, 24.0084, 40.1972, 62.4217, 20.9481, 76.0034, 2.0156, 15.9165, 82.3703, 26.6404, 11.1249, 82.424, 45.4861, 17.8684, 89.6806, 93.2913, 32.9056, 4.0138, 16.8728, 3.6863, 32.742, 82.6215, 42.6241, 99.5618, 43.5834, 76.8938, 33.1376, 4.9452, 88.785, 8.5013, 75.4114, 56.7229, 93.1116, 33.6792, 81.8649, 30.6917, 63.0232, 62.8769, 98.9247, 11.2017, 59.5968, 11.7055, 28.2408, 99.0372, 11.5133, 19.4098, 76.9594, 22.253, 43.4698, 67.7175, 99.5258]    1
    Should Contain X Times    ${output}    === [ackCommand_configureLut] acknowledging a command with :    1
    Should Contain    ${output}    seqNum   :
    Should Contain    ${output}    ack      : 301
    Should Contain X Times    ${output}    error \ \ \ : 0    1
    Should Contain    ${output}    result   : Ack : OK
    Should Contain    ${output}    ack      : 303
    Should Contain    ${output}    result   : Done : OK
